{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMuzeiZ0cPLeMWmwzPko5FS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/fahmisyuhada/Big-Data-Digitalent/blob/main/KLASIFIKASI_DIABETES_DENGAN_ALGORITAM%20SVM\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "433MZcTxWweK"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.read_csv(\"diabetes.csv\", sep=\",\")"
      ],
      "metadata": {
        "id": "m5AGdKnBXRWw"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "UnOc_r2rXhYx",
        "outputId": "bf4a19f9-20ca-4d41-e295-2644dfa0a9b2"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0              6      148             72             35        0  33.6   \n",
              "1              1       85             66             29        0  26.6   \n",
              "2              8      183             64              0        0  23.3   \n",
              "3              1       89             66             23       94  28.1   \n",
              "4              0      137             40             35      168  43.1   \n",
              "..           ...      ...            ...            ...      ...   ...   \n",
              "763           10      101             76             48      180  32.9   \n",
              "764            2      122             70             27        0  36.8   \n",
              "765            5      121             72             23      112  26.2   \n",
              "766            1      126             60              0        0  30.1   \n",
              "767            1       93             70             31        0  30.4   \n",
              "\n",
              "     DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                       0.627   50        1  \n",
              "1                       0.351   31        0  \n",
              "2                       0.672   32        1  \n",
              "3                       0.167   21        0  \n",
              "4                       2.288   33        1  \n",
              "..                        ...  ...      ...  \n",
              "763                     0.171   63        0  \n",
              "764                     0.340   27        0  \n",
              "765                     0.245   30        0  \n",
              "766                     0.349   47        1  \n",
              "767                     0.315   23        0  \n",
              "\n",
              "[768 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8b4c19b4-893c-485b-89f5-fe7d61910508\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>763</th>\n",
              "      <td>10</td>\n",
              "      <td>101</td>\n",
              "      <td>76</td>\n",
              "      <td>48</td>\n",
              "      <td>180</td>\n",
              "      <td>32.9</td>\n",
              "      <td>0.171</td>\n",
              "      <td>63</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>764</th>\n",
              "      <td>2</td>\n",
              "      <td>122</td>\n",
              "      <td>70</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>36.8</td>\n",
              "      <td>0.340</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>765</th>\n",
              "      <td>5</td>\n",
              "      <td>121</td>\n",
              "      <td>72</td>\n",
              "      <td>23</td>\n",
              "      <td>112</td>\n",
              "      <td>26.2</td>\n",
              "      <td>0.245</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>766</th>\n",
              "      <td>1</td>\n",
              "      <td>126</td>\n",
              "      <td>60</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.1</td>\n",
              "      <td>0.349</td>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>767</th>\n",
              "      <td>1</td>\n",
              "      <td>93</td>\n",
              "      <td>70</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>30.4</td>\n",
              "      <td>0.315</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>768 rows Ã— 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b4c19b4-893c-485b-89f5-fe7d61910508')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8b4c19b4-893c-485b-89f5-fe7d61910508 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8b4c19b4-893c-485b-89f5-fe7d61910508');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-528f36ab-a1b0-4b50-b6a4-7ea65535cc1c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-528f36ab-a1b0-4b50-b6a4-7ea65535cc1c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-528f36ab-a1b0-4b50-b6a4-7ea65535cc1c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "ZgdfiNxsXpNH",
        "outputId": "d3eb37d0-a1c1-46a9-a459-33dfd245daf3"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0            6      148             72             35        0  33.6   \n",
              "1            1       85             66             29        0  26.6   \n",
              "2            8      183             64              0        0  23.3   \n",
              "3            1       89             66             23       94  28.1   \n",
              "4            0      137             40             35      168  43.1   \n",
              "\n",
              "   DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                     0.627   50        1  \n",
              "1                     0.351   31        0  \n",
              "2                     0.672   32        1  \n",
              "3                     0.167   21        0  \n",
              "4                     2.288   33        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-25d793ac-65f2-4330-8c85-3cfd0f8d270d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-25d793ac-65f2-4330-8c85-3cfd0f8d270d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-25d793ac-65f2-4330-8c85-3cfd0f8d270d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-25d793ac-65f2-4330-8c85-3cfd0f8d270d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2c633c7c-c6dd-4876-86ad-3cbe941d880e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2c633c7c-c6dd-4876-86ad-3cbe941d880e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2c633c7c-c6dd-4876-86ad-3cbe941d880e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "HF-D6pm9TdKH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rKvyb26xXzkI",
        "outputId": "c0f7e3d2-5274-44e3-e8df-f677000c9e64"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 768 entries, 0 to 767\n",
            "Data columns (total 9 columns):\n",
            " #   Column                    Non-Null Count  Dtype  \n",
            "---  ------                    --------------  -----  \n",
            " 0   Pregnancies               768 non-null    int64  \n",
            " 1   Glucose                   768 non-null    int64  \n",
            " 2   BloodPressure             768 non-null    int64  \n",
            " 3   SkinThickness             768 non-null    int64  \n",
            " 4   Insulin                   768 non-null    int64  \n",
            " 5   BMI                       768 non-null    float64\n",
            " 6   DiabetesPedigreeFunction  768 non-null    float64\n",
            " 7   Age                       768 non-null    int64  \n",
            " 8   Outcome                   768 non-null    int64  \n",
            "dtypes: float64(2), int64(7)\n",
            "memory usage: 54.1 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder"
      ],
      "metadata": {
        "id": "b9Icj9AcYgIp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "enc = LabelEncoder()"
      ],
      "metadata": {
        "id": "kOC0R3PSY5_X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"Sex\"] = enc.fit_transform(dataset['Sex'].values)\n",
        "dataset[\"Blood Pressure\"] = enc.fit_transform(dataset['Blood Pressure'].values)"
      ],
      "metadata": {
        "id": "7ycTX-39YtHY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "bxEm04gNZObZ",
        "outputId": "ffd05612-ce08-40da-8834-1ea01bf9a6b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Patient ID  Age  Sex  Cholesterol  Blood Pressure  Heart Rate  Diabetes  \\\n",
              "0    BMW7812   67    1          208            2510          72         0   \n",
              "1    CZE1114   21    1          389            2815          98         1   \n",
              "2    BNI9906   21    0          324            3224          72         1   \n",
              "3    JLN3497   84    1          383            2689          73         1   \n",
              "4    GFO8847   66    1          318            3563          93         1   \n",
              "\n",
              "   Family History  Smoking  Obesity  ...  Sedentary Hours Per Day  Income  \\\n",
              "0               0        1        0  ...                 6.615001  261404   \n",
              "1               1        1        1  ...                 4.963459  285768   \n",
              "2               0        0        0  ...                 9.463426  235282   \n",
              "3               1        1        0  ...                 7.648981  125640   \n",
              "4               1        1        1  ...                 1.514821  160555   \n",
              "\n",
              "         BMI  Triglycerides  Physical Activity Days Per Week  \\\n",
              "0  31.251233            286                                0   \n",
              "1  27.194973            235                                1   \n",
              "2  28.176571            587                                4   \n",
              "3  36.464704            378                                3   \n",
              "4  21.809144            231                                1   \n",
              "\n",
              "   Sleep Hours Per Day    Country      Continent           Hemisphere  \\\n",
              "0                    6  Argentina  South America  Southern Hemisphere   \n",
              "1                    7     Canada  North America  Northern Hemisphere   \n",
              "2                    4     France         Europe  Northern Hemisphere   \n",
              "3                    4     Canada  North America  Northern Hemisphere   \n",
              "4                    5   Thailand           Asia  Northern Hemisphere   \n",
              "\n",
              "   Heart Attack Risk  \n",
              "0                  0  \n",
              "1                  0  \n",
              "2                  0  \n",
              "3                  0  \n",
              "4                  0  \n",
              "\n",
              "[5 rows x 26 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-877f22c2-4b72-45eb-83fd-a89852b5b476\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Patient ID</th>\n",
              "      <th>Age</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>Blood Pressure</th>\n",
              "      <th>Heart Rate</th>\n",
              "      <th>Diabetes</th>\n",
              "      <th>Family History</th>\n",
              "      <th>Smoking</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>...</th>\n",
              "      <th>Sedentary Hours Per Day</th>\n",
              "      <th>Income</th>\n",
              "      <th>BMI</th>\n",
              "      <th>Triglycerides</th>\n",
              "      <th>Physical Activity Days Per Week</th>\n",
              "      <th>Sleep Hours Per Day</th>\n",
              "      <th>Country</th>\n",
              "      <th>Continent</th>\n",
              "      <th>Hemisphere</th>\n",
              "      <th>Heart Attack Risk</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>BMW7812</td>\n",
              "      <td>67</td>\n",
              "      <td>1</td>\n",
              "      <td>208</td>\n",
              "      <td>2510</td>\n",
              "      <td>72</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>6.615001</td>\n",
              "      <td>261404</td>\n",
              "      <td>31.251233</td>\n",
              "      <td>286</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>Argentina</td>\n",
              "      <td>South America</td>\n",
              "      <td>Southern Hemisphere</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>CZE1114</td>\n",
              "      <td>21</td>\n",
              "      <td>1</td>\n",
              "      <td>389</td>\n",
              "      <td>2815</td>\n",
              "      <td>98</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>4.963459</td>\n",
              "      <td>285768</td>\n",
              "      <td>27.194973</td>\n",
              "      <td>235</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>Canada</td>\n",
              "      <td>North America</td>\n",
              "      <td>Northern Hemisphere</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>BNI9906</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "      <td>324</td>\n",
              "      <td>3224</td>\n",
              "      <td>72</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>9.463426</td>\n",
              "      <td>235282</td>\n",
              "      <td>28.176571</td>\n",
              "      <td>587</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>France</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Northern Hemisphere</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>JLN3497</td>\n",
              "      <td>84</td>\n",
              "      <td>1</td>\n",
              "      <td>383</td>\n",
              "      <td>2689</td>\n",
              "      <td>73</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7.648981</td>\n",
              "      <td>125640</td>\n",
              "      <td>36.464704</td>\n",
              "      <td>378</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>Canada</td>\n",
              "      <td>North America</td>\n",
              "      <td>Northern Hemisphere</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>GFO8847</td>\n",
              "      <td>66</td>\n",
              "      <td>1</td>\n",
              "      <td>318</td>\n",
              "      <td>3563</td>\n",
              "      <td>93</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1.514821</td>\n",
              "      <td>160555</td>\n",
              "      <td>21.809144</td>\n",
              "      <td>231</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>Thailand</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Northern Hemisphere</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-877f22c2-4b72-45eb-83fd-a89852b5b476')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-877f22c2-4b72-45eb-83fd-a89852b5b476 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-877f22c2-4b72-45eb-83fd-a89852b5b476');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d80b3301-8358-42ad-bd1e-35b017c73622\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d80b3301-8358-42ad-bd1e-35b017c73622')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d80b3301-8358-42ad-bd1e-35b017c73622 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "dataset[\"Diet\"] = enc.fit_transform(dataset['Diet'].values)\n",
        "dataset[\"Country\"] = enc.fit_transform(dataset['Country'].values)\n",
        "dataset[\"Continent\"] = enc.fit_transform(dataset['Continent'].values)\n",
        "dataset[\"Hemisphere\"] = enc.fit_transform(dataset['Hemisphere'].values)"
      ],
      "metadata": {
        "id": "DgwSDYqLZbLI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zSuVwv_7Z42g",
        "outputId": "83ead744-eb61-4230-e542-c76047d0c6c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8763 entries, 0 to 8762\n",
            "Data columns (total 26 columns):\n",
            " #   Column                           Non-Null Count  Dtype  \n",
            "---  ------                           --------------  -----  \n",
            " 0   Patient ID                       8763 non-null   object \n",
            " 1   Age                              8763 non-null   int64  \n",
            " 2   Sex                              8763 non-null   int64  \n",
            " 3   Cholesterol                      8763 non-null   int64  \n",
            " 4   Blood Pressure                   8763 non-null   int64  \n",
            " 5   Heart Rate                       8763 non-null   int64  \n",
            " 6   Diabetes                         8763 non-null   int64  \n",
            " 7   Family History                   8763 non-null   int64  \n",
            " 8   Smoking                          8763 non-null   int64  \n",
            " 9   Obesity                          8763 non-null   int64  \n",
            " 10  Alcohol Consumption              8763 non-null   int64  \n",
            " 11  Exercise Hours Per Week          8763 non-null   float64\n",
            " 12  Diet                             8763 non-null   int64  \n",
            " 13  Previous Heart Problems          8763 non-null   int64  \n",
            " 14  Medication Use                   8763 non-null   int64  \n",
            " 15  Stress Level                     8763 non-null   int64  \n",
            " 16  Sedentary Hours Per Day          8763 non-null   float64\n",
            " 17  Income                           8763 non-null   int64  \n",
            " 18  BMI                              8763 non-null   float64\n",
            " 19  Triglycerides                    8763 non-null   int64  \n",
            " 20  Physical Activity Days Per Week  8763 non-null   int64  \n",
            " 21  Sleep Hours Per Day              8763 non-null   int64  \n",
            " 22  Country                          8763 non-null   int64  \n",
            " 23  Continent                        8763 non-null   int64  \n",
            " 24  Hemisphere                       8763 non-null   int64  \n",
            " 25  Heart Attack Risk                8763 non-null   int64  \n",
            "dtypes: float64(3), int64(22), object(1)\n",
            "memory usage: 1.7+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Visualisasi Data\n",
        "Here we are going to plot :<br>-\n",
        "Count Plot :- to see if the dataset is balanced or not <br>\n",
        "Histograms :- to see if data is normally distributed or skewed <br>\n",
        "Box Plot :- to analyse the distribution and see the outliers<br>\n",
        "Scatter plots :- to understand relationship between any two variables<br>\n",
        "Pair plot :- to create scatter plot between all the variables"
      ],
      "metadata": {
        "id": "5wJTH0fiPBT5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Import library seaboarn"
      ],
      "metadata": {
        "id": "YsCTRje6QMzY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns #used for data visualization"
      ],
      "metadata": {
        "id": "W91uX7riQKTo"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Count Plot"
      ],
      "metadata": {
        "id": "A0RCD_SAP9nP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='Outcome', data=dataset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "r7D9PwNcP8-Q",
        "outputId": "73cb773a-9fe0-42e8-e454-17b228a359f8"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Outcome', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='Heart Attack Risk', data=dataset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "RJ1xR-IcRK2K",
        "outputId": "96842a36-5019-491b-8164-3116c7ac2c28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Heart Attack Risk', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='Sex', data=dataset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "c3YAazwPRqDn",
        "outputId": "a3a59da1-22bb-4a5d-faf8-6cfeb7a57dea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Sex', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Histogram Plot"
      ],
      "metadata": {
        "id": "-PkzKlsRR2xv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.hist(bins=10,figsize=(10,10))\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 853
        },
        "id": "GduiEqEaR5YX",
        "outputId": "4a5e160f-f8df-4f55-f2b6-5c6741d9f940"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "atr_data = dataset.drop(columns = ['Country', 'Patient ID', 'Continent', 'Hemisphere'])"
      ],
      "metadata": {
        "id": "OmARFWyJTWRY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        " 1   Age                              8763 non-null   int64  \n",
        " 2   Sex                              8763 non-null   int64  \n",
        " 3   Cholesterol                      8763 non-null   int64  \n",
        " 4   Blood Pressure                   8763 non-null   int64  \n",
        " 5   Heart Rate                       8763 non-null   int64  \n",
        " 6   Diabetes                         8763 non-null   int64  "
      ],
      "metadata": {
        "id": "1CAJlaWNVHq3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "columns_to_copy = dataset[['Age','Sex','Cholesterol','Blood Pressure', 'Heart Rate', 'Diabetes']]\n",
        "df2 = columns_to_copy.copy()\n",
        "df2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "q1h3eQmzVAi_",
        "outputId": "f562620f-d5f5-4672-c830-4ec6ef5a0085"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Sex  Cholesterol  Blood Pressure  Heart Rate  Diabetes\n",
              "0      67    1          208            2510          72         0\n",
              "1      21    1          389            2815          98         1\n",
              "2      21    0          324            3224          72         1\n",
              "3      84    1          383            2689          73         1\n",
              "4      66    1          318            3563          93         1\n",
              "...   ...  ...          ...             ...         ...       ...\n",
              "8758   60    1          121            3680          61         1\n",
              "8759   28    0          120            2434          73         1\n",
              "8760   47    1          250            2624         105         0\n",
              "8761   36    1          178             838          60         1\n",
              "8762   25    0          356            1637          75         1\n",
              "\n",
              "[8763 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7c945515-2d70-44b2-b0cf-590d0eb7ecef\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>Blood Pressure</th>\n",
              "      <th>Heart Rate</th>\n",
              "      <th>Diabetes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>67</td>\n",
              "      <td>1</td>\n",
              "      <td>208</td>\n",
              "      <td>2510</td>\n",
              "      <td>72</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>21</td>\n",
              "      <td>1</td>\n",
              "      <td>389</td>\n",
              "      <td>2815</td>\n",
              "      <td>98</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "      <td>324</td>\n",
              "      <td>3224</td>\n",
              "      <td>72</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>84</td>\n",
              "      <td>1</td>\n",
              "      <td>383</td>\n",
              "      <td>2689</td>\n",
              "      <td>73</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>66</td>\n",
              "      <td>1</td>\n",
              "      <td>318</td>\n",
              "      <td>3563</td>\n",
              "      <td>93</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8758</th>\n",
              "      <td>60</td>\n",
              "      <td>1</td>\n",
              "      <td>121</td>\n",
              "      <td>3680</td>\n",
              "      <td>61</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8759</th>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>120</td>\n",
              "      <td>2434</td>\n",
              "      <td>73</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8760</th>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "      <td>250</td>\n",
              "      <td>2624</td>\n",
              "      <td>105</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8761</th>\n",
              "      <td>36</td>\n",
              "      <td>1</td>\n",
              "      <td>178</td>\n",
              "      <td>838</td>\n",
              "      <td>60</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8762</th>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "      <td>356</td>\n",
              "      <td>1637</td>\n",
              "      <td>75</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8763 rows Ã— 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7c945515-2d70-44b2-b0cf-590d0eb7ecef')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7c945515-2d70-44b2-b0cf-590d0eb7ecef button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7c945515-2d70-44b2-b0cf-590d0eb7ecef');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7a855710-0578-42ba-936e-54782182b033\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7a855710-0578-42ba-936e-54782182b033')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7a855710-0578-42ba-936e-54782182b033 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corrmat=df2.corr()\n",
        "sns.heatmap(corrmat, annot=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "vpLctsqhTBMX",
        "outputId": "050a5eee-b584-4bf2-b11e-156d4a56452a"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-87e889ca6811>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcorrmat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorrmat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'df2' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " 7   Family History                   8763 non-null   int64  \n",
        " 8   Smoking                          8763 non-null   int64  \n",
        " 9   Obesity                          8763 non-null   int64  \n",
        " 10  Alcohol Consumption              8763 non-null   int64  \n",
        " 11  Exercise Hours Per Week          8763 non-null   float64\n",
        " 12  Diet                             8763 non-null   int64  \n",
        " 13  Previous Heart Problems          8763 non-null   int64  "
      ],
      "metadata": {
        "id": "dT7CKpeDW66f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "columns_to_copy = dataset[['Family History','Smoking','Obesity','Alcohol Consumption', 'Exercise Hours Per Week', 'Diabetes']]\n",
        "df3 = columns_to_copy.copy()\n",
        "df3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "qpecDQuhWx3_",
        "outputId": "7f27300e-4659-40f4-dc29-9cb4e0ffae88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Family History  Smoking  Obesity  Alcohol Consumption  \\\n",
              "0                  0        1        0                    0   \n",
              "1                  1        1        1                    1   \n",
              "2                  0        0        0                    0   \n",
              "3                  1        1        0                    1   \n",
              "4                  1        1        1                    0   \n",
              "...              ...      ...      ...                  ...   \n",
              "8758               1        1        0                    1   \n",
              "8759               0        0        1                    0   \n",
              "8760               1        1        1                    1   \n",
              "8761               0        1        0                    0   \n",
              "8762               1        0        0                    1   \n",
              "\n",
              "      Exercise Hours Per Week  Diabetes  \n",
              "0                    4.168189         0  \n",
              "1                    1.813242         1  \n",
              "2                    2.078353         1  \n",
              "3                    9.828130         1  \n",
              "4                    5.804299         1  \n",
              "...                       ...       ...  \n",
              "8758                 7.917342         1  \n",
              "8759                16.558426         1  \n",
              "8760                 3.148438         0  \n",
              "8761                 3.789950         1  \n",
              "8762                18.081748         1  \n",
              "\n",
              "[8763 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68fe4a97-55fb-446c-9fc0-e7e5863e6976\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Family History</th>\n",
              "      <th>Smoking</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Alcohol Consumption</th>\n",
              "      <th>Exercise Hours Per Week</th>\n",
              "      <th>Diabetes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.168189</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.813242</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.078353</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.828130</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.804299</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8758</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>7.917342</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8759</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>16.558426</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8760</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3.148438</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8761</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.789950</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8762</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>18.081748</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8763 rows Ã— 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68fe4a97-55fb-446c-9fc0-e7e5863e6976')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-68fe4a97-55fb-446c-9fc0-e7e5863e6976 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-68fe4a97-55fb-446c-9fc0-e7e5863e6976');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-55cbb0a1-65dc-4740-af39-c9f29d90c4ff\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-55cbb0a1-65dc-4740-af39-c9f29d90c4ff')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-55cbb0a1-65dc-4740-af39-c9f29d90c4ff button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corrmat=dataset.corr()\n",
        "sns.heatmap(corrmat, annot=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 620
        },
        "id": "lRCLcrvYXUle",
        "outputId": "f78efe4c-18b2-42b8-ee89-a5543fc80f5b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "14  Medication Use                   8763 non-null   int64  \n",
        " 15  Stress Level                     8763 non-null   int64  \n",
        " 16  Sedentary Hours Per Day          8763 non-null   float64\n",
        " 17  Income                           8763 non-null   int64  \n",
        " 18  BMI                              8763 non-null   float64\n",
        " 19  Triglycerides                    8763 non-null   int64  \n",
        " Triglycerides                    8763 non-null   int64  \n",
        " 20  Physical Activity Days Per Week  8763 non-null   int64  \n",
        " 21  Sleep Hours Per Day              8763 non-null   int64  "
      ],
      "metadata": {
        "id": "7uxy1mNOX7RH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "columns_to_copy = dataset[['Medication Use','Stress Level','Sedentary Hours Per Day','BMI', 'Triglycerides','Sleep Hours Per Day', 'Diabetes']]\n",
        "df4 = columns_to_copy.copy()\n",
        "df4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "9Y5VwGk4Xy7O",
        "outputId": "8b3bae49-1ae4-4f4e-feb7-4923eb856ddc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Medication Use  Stress Level  Sedentary Hours Per Day        BMI  \\\n",
              "0                  0             9                 6.615001  31.251233   \n",
              "1                  0             1                 4.963459  27.194973   \n",
              "2                  1             9                 9.463426  28.176571   \n",
              "3                  0             9                 7.648981  36.464704   \n",
              "4                  0             6                 1.514821  21.809144   \n",
              "...              ...           ...                      ...        ...   \n",
              "8758               1             8                10.806373  19.655895   \n",
              "8759               0             8                 3.833038  23.993866   \n",
              "8760               0             5                 2.375214  35.406146   \n",
              "8761               1             5                 0.029104  27.294020   \n",
              "8762               0             8                 9.005234  32.914151   \n",
              "\n",
              "      Triglycerides  Sleep Hours Per Day  Diabetes  \n",
              "0               286                    6         0  \n",
              "1               235                    7         1  \n",
              "2               587                    4         1  \n",
              "3               378                    4         1  \n",
              "4               231                    5         1  \n",
              "...             ...                  ...       ...  \n",
              "8758             67                    7         1  \n",
              "8759            617                    9         1  \n",
              "8760            527                    4         0  \n",
              "8761            114                    8         1  \n",
              "8762            180                    4         1  \n",
              "\n",
              "[8763 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-653f43b6-7a24-4dc7-9f65-36a5703c618a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Medication Use</th>\n",
              "      <th>Stress Level</th>\n",
              "      <th>Sedentary Hours Per Day</th>\n",
              "      <th>BMI</th>\n",
              "      <th>Triglycerides</th>\n",
              "      <th>Sleep Hours Per Day</th>\n",
              "      <th>Diabetes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>6.615001</td>\n",
              "      <td>31.251233</td>\n",
              "      <td>286</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4.963459</td>\n",
              "      <td>27.194973</td>\n",
              "      <td>235</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>9.463426</td>\n",
              "      <td>28.176571</td>\n",
              "      <td>587</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>7.648981</td>\n",
              "      <td>36.464704</td>\n",
              "      <td>378</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>1.514821</td>\n",
              "      <td>21.809144</td>\n",
              "      <td>231</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8758</th>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>10.806373</td>\n",
              "      <td>19.655895</td>\n",
              "      <td>67</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8759</th>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>3.833038</td>\n",
              "      <td>23.993866</td>\n",
              "      <td>617</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8760</th>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>2.375214</td>\n",
              "      <td>35.406146</td>\n",
              "      <td>527</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8761</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0.029104</td>\n",
              "      <td>27.294020</td>\n",
              "      <td>114</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8762</th>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>9.005234</td>\n",
              "      <td>32.914151</td>\n",
              "      <td>180</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8763 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-653f43b6-7a24-4dc7-9f65-36a5703c618a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-653f43b6-7a24-4dc7-9f65-36a5703c618a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-653f43b6-7a24-4dc7-9f65-36a5703c618a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b0e563fb-c344-40b4-84fa-740770d3a6ec\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b0e563fb-c344-40b4-84fa-740770d3a6ec')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b0e563fb-c344-40b4-84fa-740770d3a6ec button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corrmat=df4.corr()\n",
        "sns.heatmap(corrmat, annot=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 613
        },
        "id": "DY7kOgWPYdq_",
        "outputId": "1a5e5d9c-a29d-444f-f59e-ccd38bb32414"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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MkJkZCSaNWuGs2fPQkNDQ+gQiYgUFhNSIqJcuHXrFnx9fZGQkABzc3NYWVkJHRIRkcJjQkpEREREguIYUiKiHHh4eOD06dMy23bt2gVTU1Po6+tj5MiRSEpKEig6IqKigQkpEVEOFixYgIcPH0qf+/v7w87ODlZWVnBwcICbmxucnJwEjJCISPHxkj0RUQ4MDQ3h5uYGCwsLAMCsWbNw/fp1/PPPPwCAw4cPw9HREQEBAUKGSUSk0NhDSkSUg/fv30MsFkufX79+HZ07d5Y+b9SoEZ4/fy5EaERERQYTUiKiHIjFYoSEhAAAkpOT4eXlhaZNm0r3x8fHQ0VFRajwiIiKBCakREQ56NKlCxwcHHDz5k3MmDED6urqaNmypXS/n58fqlSpImCERESKr4TQARARFWYLFy6EjY0NWrVqBU1NTezcuROqqqrS/du3b0eHDh0EjJCISPFxUhMRkRxiY2OhqakJZWVlme3v3r2DpqamTJJKRES5w4SUiIiIiATFMaREREREJCgmpEREREQkKCakRERERCQoJqREREREJCgmpEREREQkKCakRERERCQoJqREREREJKj/A0vMSJaurda8AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-pDT9EPubNlA",
        "outputId": "bab1952f-e761-48d7-9f6c-a242dc8a88a7"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 768 entries, 0 to 767\n",
            "Data columns (total 9 columns):\n",
            " #   Column                    Non-Null Count  Dtype  \n",
            "---  ------                    --------------  -----  \n",
            " 0   Pregnancies               768 non-null    int64  \n",
            " 1   Glucose                   768 non-null    int64  \n",
            " 2   BloodPressure             768 non-null    int64  \n",
            " 3   SkinThickness             768 non-null    int64  \n",
            " 4   Insulin                   768 non-null    int64  \n",
            " 5   BMI                       768 non-null    float64\n",
            " 6   DiabetesPedigreeFunction  768 non-null    float64\n",
            " 7   Age                       768 non-null    int64  \n",
            " 8   Outcome                   768 non-null    int64  \n",
            "dtypes: float64(2), int64(7)\n",
            "memory usage: 54.1 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "columns_to_copy = dataset[['Pregnancies','Glucose','Insulin','BMI', 'DiabetesPedigreeFunction', 'Age']]\n",
        "attr_data = columns_to_copy.copy()\n",
        "attr_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "E1Fs1Uf0O4IY",
        "outputId": "c82d7cd1-eb1a-4fc7-b4ba-42f2daf4fc60"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pregnancies  Glucose  Insulin   BMI  DiabetesPedigreeFunction  Age\n",
              "0              6      148        0  33.6                     0.627   50\n",
              "1              1       85        0  26.6                     0.351   31\n",
              "2              8      183        0  23.3                     0.672   32\n",
              "3              1       89       94  28.1                     0.167   21\n",
              "4              0      137      168  43.1                     2.288   33\n",
              "..           ...      ...      ...   ...                       ...  ...\n",
              "763           10      101      180  32.9                     0.171   63\n",
              "764            2      122        0  36.8                     0.340   27\n",
              "765            5      121      112  26.2                     0.245   30\n",
              "766            1      126        0  30.1                     0.349   47\n",
              "767            1       93        0  30.4                     0.315   23\n",
              "\n",
              "[768 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1b25777a-4963-470b-bf9b-6f9041e63e50\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>763</th>\n",
              "      <td>10</td>\n",
              "      <td>101</td>\n",
              "      <td>180</td>\n",
              "      <td>32.9</td>\n",
              "      <td>0.171</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>764</th>\n",
              "      <td>2</td>\n",
              "      <td>122</td>\n",
              "      <td>0</td>\n",
              "      <td>36.8</td>\n",
              "      <td>0.340</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>765</th>\n",
              "      <td>5</td>\n",
              "      <td>121</td>\n",
              "      <td>112</td>\n",
              "      <td>26.2</td>\n",
              "      <td>0.245</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>766</th>\n",
              "      <td>1</td>\n",
              "      <td>126</td>\n",
              "      <td>0</td>\n",
              "      <td>30.1</td>\n",
              "      <td>0.349</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>767</th>\n",
              "      <td>1</td>\n",
              "      <td>93</td>\n",
              "      <td>0</td>\n",
              "      <td>30.4</td>\n",
              "      <td>0.315</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>768 rows Ã— 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b25777a-4963-470b-bf9b-6f9041e63e50')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1b25777a-4963-470b-bf9b-6f9041e63e50 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1b25777a-4963-470b-bf9b-6f9041e63e50');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-afc12af6-e717-4494-844e-ae97a3216273\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-afc12af6-e717-4494-844e-ae97a3216273')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-afc12af6-e717-4494-844e-ae97a3216273 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tar_data = dataset['Outcome']\n",
        "tar_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qdUCZyWmbTex",
        "outputId": "b8b454aa-013a-47f5-b4bb-a23d9404be86"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      1\n",
              "1      0\n",
              "2      1\n",
              "3      0\n",
              "4      1\n",
              "      ..\n",
              "763    0\n",
              "764    0\n",
              "765    0\n",
              "766    1\n",
              "767    0\n",
              "Name: Outcome, Length: 768, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "w1ucT-4Lbkd4"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xtrain, xtest, ytrain, ytest = train_test_split(attr_data, tar_data, test_size=0.2, random_state=1)\n",
        "\n"
      ],
      "metadata": {
        "id": "v62cPvz6cKDh"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tree_dataset = DecisionTreeClassifier(random_state=1)"
      ],
      "metadata": {
        "id": "twLS6E4ocpZA"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tree_dataset.fit(xtrain,ytrain)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "vfGVsQW8cyAw",
        "outputId": "031e050d-94a7-4354-f8c4-ad76edb13fb8"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(random_state=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_predict = tree_dataset.predict(xtest)\n",
        "\n",
        "cm = confusion_matrix(ytest, y_predict)\n",
        "print(\"Confusion Matrix\")\n",
        "print(cm)\n",
        "\n",
        "akurasi = classification_report(ytest, y_predict)\n",
        "print(\"Tingkat akurasi metode C5.5 : \")\n",
        "print(\"Akurasi : \", akurasi)\n",
        "akurasi = accuracy_score(ytest, y_predict)\n",
        "print(\"tingkat akurasi : %d persen\"%(akurasi*100))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RFAdAbYqdHJg",
        "outputId": "c21c5f93-6c46-4a25-e390-cf8b4b3138c8"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix\n",
            "[[81 18]\n",
            " [22 33]]\n",
            "Tingkat akurasi metode C5.5 : \n",
            "Akurasi :                precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.82      0.80        99\n",
            "           1       0.65      0.60      0.62        55\n",
            "\n",
            "    accuracy                           0.74       154\n",
            "   macro avg       0.72      0.71      0.71       154\n",
            "weighted avg       0.74      0.74      0.74       154\n",
            "\n",
            "tingkat akurasi : 74 persen\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import RepeatedStratifiedKFold\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report,confusion_matrix\n",
        "from sklearn.metrics import f1_score, precision_score, recall_score"
      ],
      "metadata": {
        "id": "gl5oS6r8d2yJ"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = SVC()\n",
        "kernel = ['poly', 'rbf', 'sigmoid']\n",
        "C = [50, 10, 1.0, 0.1, 0.01]\n",
        "gamma = ['scale']"
      ],
      "metadata": {
        "id": "N33F8CARWSBe"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = SVC()\n",
        "kernel = ['poly', 'rbf', 'sigmoid']\n",
        "C = [50, 10, 1.0, 0.1, 0.01]\n",
        "gamma = ['scale']"
      ],
      "metadata": {
        "id": "T_u3gXlqWXx2"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# define grid search\n",
        "grid = dict(kernel=kernel,C=C,gamma=gamma)\n",
        "cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "grid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='f1',error_score=0)"
      ],
      "metadata": {
        "id": "Vep-oq1OWexr"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid_result = grid_search.fit(xtest, ytest)"
      ],
      "metadata": {
        "id": "1foY9nsiWequ"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "svm_pred=grid_result.predict(xtest)"
      ],
      "metadata": {
        "id": "X0YQem-HXAmP"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Classification Report is:\\n\",classification_report(ytest,svm_pred))\n",
        "#print(\"\\n F1:\\n\",f1_score(ytest,knn_pred))\n",
        "#print(\"\\n Precision score is:\\n\",precision_score(ytest,knn_pred))\n",
        "#print(\"\\n Recall score is:\\n\",recall_score(ytest,knn_pred))\n",
        "print(\"\\n Confusion Matrix:\\n\")\n",
        "sns.heatmap(confusion_matrix(ytest,svm_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 673
        },
        "id": "Dlna7ijAXF03",
        "outputId": "c83ff104-b741-46ef-97e2-de56155ab1ef"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report is:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.88      0.83        99\n",
            "           1       0.73      0.58      0.65        55\n",
            "\n",
            "    accuracy                           0.77       154\n",
            "   macro avg       0.76      0.73      0.74       154\n",
            "weighted avg       0.77      0.77      0.77       154\n",
            "\n",
            "\n",
            " Confusion Matrix:\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.model_selection import RepeatedStratifiedKFold\n",
        "from sklearn.metrics import classification_report,confusion_matrix\n",
        "from sklearn.metrics import f1_score, precision_score, recall_score\n",
        "from sklearn.model_selection import GridSearchCV"
      ],
      "metadata": {
        "id": "OHY0mmKvXfxO"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#List Hyperparameters to tune\n",
        "knn= KNeighborsClassifier()\n",
        "n_neighbors = list(range(15,25))\n",
        "p=[1,2]\n",
        "weights = ['uniform', 'distance']\n",
        "metric = ['euclidean', 'manhattan', 'minkowski']\n",
        "\n",
        "#convert to dictionary\n",
        "hyperparameters = dict(n_neighbors=n_neighbors, p=p,weights=weights,metric=metric)\n",
        "\n",
        "#Making model\n",
        "cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "grid_search = GridSearchCV(estimator=knn, param_grid=hyperparameters, n_jobs=-1, cv=cv, scoring='f1',error_score=0)"
      ],
      "metadata": {
        "id": "cZH19M8KXmJH"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "best_model = grid_search.fit(xtrain,ytrain)"
      ],
      "metadata": {
        "id": "IblrWVVkXn1O"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Best Hyperparameters Value\n",
        "print('Best leaf_size:', best_model.best_estimator_.get_params()['leaf_size'])\n",
        "print('Best p:', best_model.best_estimator_.get_params()['p'])\n",
        "print('Best n_neighbors:', best_model.best_estimator_.get_params()['n_neighbors'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fSQKRGCfX0Px",
        "outputId": "581657a6-4fdd-486c-fb8b-b38542cc96d4"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best leaf_size: 30\n",
            "Best p: 1\n",
            "Best n_neighbors: 21\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Predict testing set\n",
        "knn_pred = best_model.predict(xtest)"
      ],
      "metadata": {
        "id": "fnBBICxjX3nX"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Classification Report is:\\n\",classification_report(ytest,knn_pred))\n",
        "print(\"\\n F1:\\n\",f1_score(ytest,knn_pred))\n",
        "print(\"\\n Precision score is:\\n\",precision_score(ytest,knn_pred))\n",
        "print(\"\\n Recall score is:\\n\",recall_score(ytest,knn_pred))\n",
        "print(\"\\n Confusion Matrix:\\n\")\n",
        "sns.heatmap(confusion_matrix(ytest,knn_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 829
        },
        "id": "RJ3bp4DmX7dP",
        "outputId": "2f237cf9-03c1-4c2f-db2c-d1fe9c16e5a7"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report is:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.88      0.83        99\n",
            "           1       0.73      0.58      0.65        55\n",
            "\n",
            "    accuracy                           0.77       154\n",
            "   macro avg       0.76      0.73      0.74       154\n",
            "weighted avg       0.77      0.77      0.77       154\n",
            "\n",
            "\n",
            " F1:\n",
            " 0.6464646464646464\n",
            "\n",
            " Precision score is:\n",
            " 0.7272727272727273\n",
            "\n",
            " Recall score is:\n",
            " 0.5818181818181818\n",
            "\n",
            " Confusion Matrix:\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}